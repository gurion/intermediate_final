Gurion Marks, Jeremy Mazumder
gmarks2, jmazumd1
Intermediate Programming Fall '16
Section 1
Final Project

This is the final project for Intermediate Programming - to design and build a plagiarism checking program.

1) Running
   Run make in the src directory. An executable called run will be created that you can then run.
       The execution step should look like:
       	   ./run <file_path> <sensitivity>
	   	 OR
	   ./run <file_path> (sensitivity will be assumed medium)

2) Testing
   Run make in the tests directory. An executable called test will be created that runs unit tests on functions used.
   
3) Plan of Attack
	I initially thought to make a "document" class, which essentially would just hold an Ngram collection. Each file would be turned into an Ngram collection, stored in a document, a class called docList would hold a vector of documents. I realized that this would be an unnecessary middle step, and just made a vector of Ngram collections as needed. Therefore I took out the middle document class, and slightly modified Ngram collection for added functionality. DocList then just holds a list of the file names, and an Ngram collection is created for each file and stored in a vector during plagiarism checking step. The algorithm builds a string of file pairs which gets printed by the driver.  

	The plagiarism algorithms are held in a file called plagiarism algorithms. I'm essentially using the fingerprint method - if a certain percentage of Ngrams in the smaller file match Ngrams in the larger file, then the pair is classified as plagiarism. Therefore I can just use a switch statement and modify the percentage. Sensitivities are classified as follows: h - 5%, m - 10%, l - 20%.

4) Design
   Directory: src
	Class: NgramCollection
		Description - This class holds functions for getting input from a file and turning it into an NgramCollection.
		Function: getInput
			  Makes an NgramCollection from a file
		Function: increment
			  parses through a file to add to an NgramCollection
		Function: toString
			  Mostly for testing, stringifies an NgramCollection
		Function: getN
			  Getter
		Function: getNumWords
			  Getter - num words in a file
		Function: getNumGrams
			  Getter - number of Ngrams
		
	Class: DocList
		Description - This class holds functions for checking files and making a list of file names.
		Function: MakeList
			  Add file names to a vector
		Function: CheckList
			  Make sure all files in a list are good
		Function: getNumDocs
			  Getter - tells number of documents in a list

	File: PlagiarismAlgorithms
		Description - Function to check a list of files for plagiarism at a specified sensitivity.
		Function: algs
			  Does the actual plagiarim checking. Checks two NgramCollections at a time, string by string. If the number of similar strings is above a threshold (given by sensitivity) then the files are marked as similar. Returns a string that is a list of pairs.
		Function: compare
			  compares two vectors. Used algs.
		
	File: Driver
		Holds main method for the program, and deals with input.
	
	File: Makefile
		Links and compiles files to produce executable.

   Directory: tests
   	*These files are for testing the functions described above*
   	File: unitTestDriver.cpp
	File: unitTests-NgramCollection.cpp
	File: unitTests-docList.cpp
	File: unitTests-plagiarismAlgorithms.cpp
	File: Makefile
	Text Files: 
	     test1doc1.txt  
	     test1doc2.txt  
	     test1doc3.txt  
	     test3doc1.txt  
	     test3doc2.txt  
	     test3doc3.txt  
	     test3doc4.txt  
	     test3doc5.txt  
	Lists of Test Files:
	     testfile1.txt 
	     testfile2.txt
	     testfile3.txt
   
   Directory: include
   	File: catch.hpp
	File: docList.hpp
	File: NgramCollection.hpp
	File: plagiarismAlgorithms.hpp

5) Flags
   Sensitivities are classified as follows: h - 5%, m - 20%, l - 40%.

6) Timing
   I used ctime to build in a timing mechanism to tell you how long the program takes. The small data set took around a second, and the medium one took 5. I didn't wait for big or huge, but looking at the smaller times, it would probably be a few minutes.

7) Challenges
   I had initial challenges on trying to figure out how to best get and store input in order to make the program efficient. I ended up storing NgramCollections in a vector so that I only dealt with input once, and figured out a good algorithm for string matching to make parsing through data pretty quick.

8) Future
   There are many things I can do to make the plagiarism checking more accurate, such as implementing more algorithms or a different type of checking. I can also work to make it more efficient. 
